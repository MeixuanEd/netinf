saveRDS(tpr_log, sprintf("%s/tpr_log.rds", result_path))
writeMat(sprintf("%s/tprLog.m", result_path), A = tpr_log)
saveRDS(fpr_log, sprintf("%s/fpr_log.rds", result_path))
writeMat(sprintf("%s/fprLog.m", result_path), A = fpr_log)
saveRDS(acc_log, sprintf("%s/acc_log.rds", result_path))
writeMat(sprintf("%s/accLog.m", result_path), A = acc_log)
saveRDS(graph_log, sprintf("%s/graph_log.rds", result_path))
writeMat(sprintf("%s/graphLog.m", result_path), A = graph_log)
# Plot directional causality rho graphs
ave_rho_graphs <- apply(graph_log, c(1, 2, 3, 5, 6, 7), mean)
rho_graphs_none <- apply(ave_rho_graphs[,,,1:100,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:200,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:300,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:400,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 1
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
ave_accs
# Compute the confusion matrix
confusion_mat <- confusion_matrix(true_mats, pred_mats[,,, 7, 4])
print(confusion_mat)
# Save experiment result files.
saveRDS(pred_mats, sprintf("%s/pred_mats.rds", result_path))
writeMat(sprintf("%s/predMats.m", result_path), A = pred_mats)
saveRDS(tpr_log, sprintf("%s/tpr_log.rds", result_path))
writeMat(sprintf("%s/tprLog.m", result_path), A = tpr_log)
saveRDS(fpr_log, sprintf("%s/fpr_log.rds", result_path))
writeMat(sprintf("%s/fprLog.m", result_path), A = fpr_log)
saveRDS(acc_log, sprintf("%s/acc_log.rds", result_path))
writeMat(sprintf("%s/accLog.m", result_path), A = acc_log)
saveRDS(graph_log, sprintf("%s/graph_log.rds", result_path))
writeMat(sprintf("%s/graphLog.m", result_path), A = graph_log)
# Plot directional causality rho graphs
ave_rho_graphs <- apply(graph_log, c(1, 2, 3, 5, 6, 7), mean)
rho_graphs_none <- apply(ave_rho_graphs[,,,1:100,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:200,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:300,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:400,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 1
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
print(confusion_mat)
confusion_mat <- confusion_matrix(true_mats, pred_mats[,,, 6, 3])
print(confusion_mat)
dim(data_log)
matplot(t(data_log[,, 1, 1]), type='l')
matplot(t(data_log[,, 1, 2]), type='l')
matplot(t(data_log[,, 1, 4]), type='l')
confusion_mat <- confusion_matrix(true_mats, pred_mats[,,, 6, 3])
print(confusion_mat)
ave_accs <- apply(acc_log, c(1, 2), mean)
ave_accs
Es
raus
taus
# Compute the confusion matrix
confusion_mat <- confusion_matrix(true_mats, pred_mats[,,, 1, 4])
print(confusion_mat)
# Save experiment result files.
saveRDS(pred_mats, sprintf("%s/pred_mats.rds", result_path))
writeMat(sprintf("%s/predMats.m", result_path), A = pred_mats)
saveRDS(tpr_log, sprintf("%s/tpr_log.rds", result_path))
writeMat(sprintf("%s/tprLog.m", result_path), A = tpr_log)
saveRDS(fpr_log, sprintf("%s/fpr_log.rds", result_path))
writeMat(sprintf("%s/fprLog.m", result_path), A = fpr_log)
saveRDS(acc_log, sprintf("%s/acc_log.rds", result_path))
writeMat(sprintf("%s/accLog.m", result_path), A = acc_log)
saveRDS(graph_log, sprintf("%s/graph_log.rds", result_path))
writeMat(sprintf("%s/graphLog.m", result_path), A = graph_log)
# Plot directional causality rho graphs
ave_rho_graphs <- apply(graph_log, c(1, 2, 3, 5, 6, 7), mean)
rho_graphs_none <- apply(ave_rho_graphs[,,,1:100,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:200,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:300,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:400,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 1
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
ind_E <- 1
ind_tau <- 4
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
maxInd <- 50;
rho_graphs_none <- apply(ave_rho_graphs[,,,1:maxInd,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:(maxInd+100),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:(maxInd+200),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:(maxInd+300),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 4
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
maxInd <- 1;
rho_graphs_none <- apply(ave_rho_graphs[,,,1:maxInd,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:(maxInd+100),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:(maxInd+200),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:(maxInd+300),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 4
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
ave_accs[,, 1, 4]
ave_accs[1, 4,]
acc_log[1,4,]
plot(acc_log[1,4,200:299])
maxInd <- 100;
rho_graphs_none <- apply(ave_rho_graphs[,,,1:maxInd,,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_1causes2 <- apply(ave_rho_graphs[,,,101:(maxInd+100),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_2causes1 <- apply(ave_rho_graphs[,,,201:(maxInd+200),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
rho_graphs_both <- apply(ave_rho_graphs[,,,301:(maxInd+300),,,drop=FALSE], c(1, 2, 3, 5, 6), mean)
ind_E <- 1
ind_tau <- 4
delta <- floor(250/(num_libs + 1))
lib_sizes <- delta * 1:num_libs
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality")
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2")
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <- 2")
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2")
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1))
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 2, inset = 0.02, bty = "n", cex = 0.8)
c(1, 5)
lib <- c(1, 100)
pred <- c(101, 250)
simplex_output <- simplex(t(data_log[,, 1, 1]), lib, pred)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
lib <- c(1, 100)
pred <- c(101, 250)
simplex_output <- simplex(t(data_log[,, 1, 150]), lib, pred)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(t(data_log[,, 1, 150]), lib, pred, E=Es)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(t(data_log[,, 1, 150]), lib, pred, E=Es)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(t(data_log[,, 1, 150]), lib, pred, E=Es)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
Es
lib <- c(1, 100)
pred <- c(101, 250)
num_trials <- 100
simplex_graphs <- array(NaN, c(num_Es, num_trials, num_mats))
for (m in 1:num_Mats) {
for (t in 1:num_trials) {
simplex_graphs[, t, m] <- simplex(t(data_log[,, t, m]), lib, pred, E=Es)$rho
}
}
num_trials <- 100
simplex_graphs <- array(NaN, c(num_Es, num_trials, num_mats))
for (m in 1:num_mats) {
for (t in 1:num_trials) {
simplex_graphs[, t, m] <- simplex(t(data_log[,, t, m]), lib, pred, E=Es)$rho
}
}
num_trials <- 100
simplex_graphs <- array(NaN, c(num_Es, num_trials, num_mats))
for (m in 1:num_mats) {
print(m)
for (t in 1:num_trials) {
simplex_graphs[, t, m] <- simplex(t(data_log[,, t, m]), lib, pred, E=Es)$rho
}
}
ave_simplex_graphs <- apply(simplex_graphs, c(1, 3), mean)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,1], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
lib <- c(1, 100)
pred <- c(101, 250)
num_trials <- 100
simplex_graphs <- array(NaN, c(num_Es, num_trials, num_mats))
for (m in 1:num_mats) {
print(m)
for (t in 1:num_trials) {
simplex_graphs[, t, m] <- simplex(t(data_log[,, t, m]), lib, pred, E=Es)$rho
}
}
ave_simplex_graphs <- apply(simplex_graphs, c(1, 3), mean)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,1], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,101], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,199], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,299], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,399], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
plot(apply(simplex_graphs, c(1), mean))
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,1], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,10], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,11], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,20], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,30], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
Es <- seq(10, 40, 5)
Es
num_Es <- length(Es)
Es <- seq(2, 15, 2)
num_Es <- length(Es)
lib <- c(1, 100)
pred <- c(101, 250)
num_trials <- 100
#Es <- seq(10, 40, 5)
#num_Es <- length(Es)
simplex_graphs <- array(NaN, c(num_Es, num_trials, num_mats))
for (m in 1:num_mats) {
print(m)
for (t in 1:num_trials) {
simplex_graphs[, t, m] <- simplex(t(data_log[,, t, m]), lib, pred, E=Es, tau=15)$rho
}
}
ave_simplex_graphs <- apply(simplex_graphs, c(1, 3), mean)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,30], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[,1], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
ave_simplex_graphs
Es
dim(simplex_graphs)
simplex_graphs[, 1, 1]
simplex(t(data_log[,, 1, 1]), lib, pred, E=2, tau=15)$rho
simplex(t(data_log[,, 1, 2]), lib, pred, E=2, tau=15)$rho
simplex(t(data_log[,, 10, 2]), lib, pred, E=2, tau=15)$rho
simplex(t(data_log[,, 101, 2]), lib, pred, E=2, tau=15)$rho
simplex(t(data_log[,, 10, 101]), lib, pred, E=2, tau=15)$rho
simplex(t(data_log[,, 10, 101]), lib, pred, E=2, tau=15)
simplex(t(data_log[,, 10, 101]), lib, pred, E=6, tau=15)
simplex(t(data_log[,, 10, 101]), lib, pred, E=6, tau=15)$rho
simplex(t(data_log[,, 10, 101]), lib, pred, E=7, tau=15)$rho
simplex(t(data_log[,, 10, 101]), lib, pred, E=8, tau=15)$rho
warnings()
simplex(t(data_log[,, 10, 150]), lib, pred, E=6, tau=15)$rho
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 10], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 101], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 150], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 190], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 200], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 201], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 202], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 210], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 205], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 206], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 207], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 200], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 201], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 202], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 203], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 204], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graphs[, 220], type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
apply(simplex_graphs, c(1), mean)
ave_simplex_graph <- apply(simplex_graphs, 1, mean)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graph, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
ave_simplex_graph <- apply(simplex_graphs, c(1, 3), mean)
matplot(ave_simplex_graph)
image(ave_simplex_graph)
ave_simplex_graph
ave_simplex_graph <- apply(simplex_graphs, c(1), mean)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))  # set up margins for plotting
plot(Es, ave_simplex_graph, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
