ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font=2, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font=1.5, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font=1.7, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font=2, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font=2, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3, font=2)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.axis=2, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=3)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=4)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2", lwd=3, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "2 -> 1", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# No causality
plot(lib_sizes, rho_graphs_none[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "No causality", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_none[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# 1 causes 2
plot(lib_sizes, rho_graphs_1causes2[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 -> 2", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_1causes2[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# 2 causes 1
plot(lib_sizes, rho_graphs_2causes1[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "2 -> 1", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_2causes1[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
# Bidirectional causality
plot(lib_sizes, rho_graphs_both[1, 2,, ind_E, ind_tau], type = "l", col = "red", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), main = "1 <-> 2", lwd=5, font.lab=2, font.axis=2, cex.lab=1.5, cex.axis=1.3, cex.main=1.5, cex.sub=1.5)
lines(lib_sizes, rho_graphs_both[2, 1,, ind_E, ind_tau], type = "l", col = "blue", xlab = "Library Size",
ylab = "Cross Map Skill (rho)", ylim = c(0, 1), lwd=5)
legend(x = "topleft", col = c("red", "blue"), legend = c("1 xmap 2", "2 xmap 1"),
lwd = 3, inset = 0.02, bty = "n", text.font=2, cex = 1.3)
load("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/results.rds")
load("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/exp_params.rds")
load("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/results.rds")
acc_log
dim(acc_log)
exp_name
load("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/exp_params.rds")
loadRDS("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/exp_params.rds")
readRDS("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/exp_params.rds")
sizeNum <- 9; strengthNum <- 10; matNum <- 1; node1 <- 1; node2 <- 5
ccm_rho_graph <- graph_log[node1,node2,, 1, sizeNum, strengthNum, matNum]
if (num_trials > 1) {
ccm_rho_graph <- apply(graph_log[node1,node2,,, sizeNum, strengthNum, matNum], 1, mean)
}
plot(ccm_rho_graph, ylim=c(0, 1), type='l')
dim[graph_log]
dim(graph_log)
rgb.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,3))
}
ave_acc <- apply(acc_log, c(1, 2), function(x) {mean(x, na.rm=TRUE)})
levelplot(t(ave_acc), main="Average Accuracy over Simulations",
xlab="Connection Strength", ylab="Connection Probability",
ylim=c(num_sizes + 0.5, 0.5),
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
ave_acc <- apply(acc_log, c(1, 2), function(x) {mean(x, na.rm=TRUE)})
levelplot(t(ave_acc), main="Average Accuracy over Simulations",
xlab="Connection Strength", ylab="Network Size",
ylim=c(network_sizes + 0.5, 0.5),
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
readRDS("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/exp_params.rds")
writeMat("../HarmonicExperiments/EXPVarySizeStrengths/CCMResults/results.mat", tprLog=tpr_log, fprLog=fpr_log, accLog=acc_log)
load("~/netinf/HarmonicExperiments/EXPVarySizeStrengths/CCMResults/results.rds")
writeMat("../HarmonicExperiments/EXPVarySizeStrengths/CCMResults/results.mat", tprLog=tpr_log, fprLog=fpr_log, accLog=acc_log)
load("~/netinf/KuramotoExperiments/EXPVarySizeStrengths/CCMResults/results.rds")
writeMat("../KuramotoExperiments/EXPVarySizeStrengths/CCMResults/results.mat", tprLog=tpr_log, fprLog=fpr_log, accLog=acc_log)
dim(pred_mats)
pred_mats[1, 1, 1][[1]]
pred_mats[10, 1, 1][[1]]
ccm_rho_graph <- graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,, 1]
dim(graph_log[sizeNum, strengthNum, matNum][[1]])
if (num_trials > 1) {
ccm_rho_graph <- apply(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1], 1, mean)
}
plot(ccm_rho_graph, ylim=c(0, 1), type='l')
ccm_rho_graph <- apply(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1], 1, mean)
dim(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1])
graph_log[sizeNum, strengthNum, matNum][[1]]
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1]
apply(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1], 1, mean)
dim(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1])
dim(graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1][[1]])
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1][[1]]
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1][1]
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1][10]
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1][11]
graph_log[sizeNum, strengthNum, matNum][[1]][node1,node2,,, 1]
graph_log[1, 1, 1[[1]][node1,node2,,, 1]
q
graph_log[1, 1, 1][[1]][node1,node2,,, 1]
graph_log[1, 1, 1][[1]][1, 2,,, 1]
graph_log[10, 1, 1][[1]][1, 2,,, 1]
graph_log[10, 10, 1][[1]][1, 2,,, 1]
library(rEDM)
library(lattice)
library(abind)
library(doParallel)
require(R.matlab)
require(matlabr)
setwd("~/netinf/CCM")
source('ccm_helper.R')
source('CCMBaseExperiment.R')
source('AnalysisFunctions/moving_average.R')
exp_name <- "PertVarySizeForcingStrengths"
exp_path <- sprintf("../KuramotoExperiments/EXP%s", exp_name)
print(exp_path)
if (!dir.exists(exp_path)) {
print(sprintf("Data not found: %s", exp_path))
stop()
}
result_path <- sprintf("%s/CCMResults", exp_path)
if (!dir.exists(result_path)) {
dir.create(result_path)
} else {
m <- readline(prompt=sprintf("%s\n already exists, would you like to continue and overwrite these results (Y/N): ", result_path))
if (toupper(m) == "N") {
stop()
}
}
# Read data simulation parameters
params <- readMat(sprintf("%s/params.mat", exp_path))
# Perform CCM analysis on data
num_libs <- 1
num_samples <- 100
preprocfn <- identity
max_delay <- Inf
max_emb <- Inf
# Save experiment parameters
exp_params <- list("num_libs"=num_libs, "num_samples"=num_samples, "preprocfn"=preprocfn, "max_delay"=max_delay, "max_emb"=max_emb)
saveRDS(exp_params, sprintf("%s/exp_params.rds", result_path))
num_trials <- 1 #params$numTrials
num_mats <- params$numMats
network_sizes <- params$networkSizes
num_sizes <- params$numSizes
strengths <- params$strengths
num_strengths <- params$numStrengths
# Register number of cores
registerDoParallel(cores=25)
# Iterate over all possible connection probabilities and spring constants
Es <- array(NaN, c(num_sizes, num_strengths, num_mats))
taus <- array(NaN, c(num_sizes, num_strengths, num_mats))
results <-
foreach (j = 1:num_sizes, .combine='cbind') %:%
foreach (k = 1:num_forces, .combine='cbind') %:%
foreach (l = 1:num_strengths, .combine='cbind') %:%
foreach (m = 1:num_mats, .combine='cbind') %do% {
print(sprintf('size: %d, force: %d, strength: %d, mat: %d', j, k, l, m))
data_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/dataLog.mat", exp_path, j, k, l, m)
result_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/embedParams.txt", exp_path, j, k, l, m)
data_log <- readMat(data_path)
data <- data_log$noisyData
mat <- data_log$mat
emb_params <- embed_params(data_path, result_path, max_delay, max_emb)
Es[j, k, m] <- emb_params$E
taus[j, k, m] <- emb_params$tau
result <- CCMBaseExperiment(data, mat, emb_params$E, num_libs, emb_params$tau, num_trials, num_samples, preprocfn)
save(result, file=sprintf("%s/size%d/force%d/strength%d/mat%d/result.rds", exp_path, j, k, l, m))
result
}
# Create data structures to hold experiment results
pred_mats <- array(list(), c(num_sizes, num_forces, num_strengths, num_mats))
graph_log <- array(list(), c(num_sizes, num_forces, num_strengths, num_mats))
tpr_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
fpr_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
acc_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
for (ind in 1:(num_sizes*num_forces*num_strengths*num_mats)) {
result <- results
if (num_sizes*num_forces*num_strengths*num_mats > 1) {
result <- results[, ind]
}
idx <- arrayInd(ind, c(num_mats, num_strengths, num_forces, num_sizes))
m <- idx[1]
l <- idx[2]
k <- idx[3]
j <- idx[4]
pred_mats[j, k, l, m][[1]] <- result$pred_mats
graph_log[j, k, l, m][[1]] <- result$graphs
table_results <- result$table_results
tpr_log[j, k, l, m] <- table_results$tpr
fpr_log[j, k, l, m] <- table_results$fpr
acc_log[j, k, l, m] <- table_results$acc
}
# Save experiment result files.
save(pred_mats, tpr_log, fpr_log, acc_log, Es, taus, graph_log, file=sprintf("%s/results.rds", result_path))
writeMat(sprintf("%s/results.mat", result_path), tprLog=tpr_log, fprLog=fpr_log, accLog=acc_log)
# Plot accuracy, TPR, and FPR for all connections probability and spring constant combinations
rgb.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,3))
}
forceInd <- 1
ave_acc <- apply(acc_log[, forceInd,,], c(1, 2), function(x) {mean(x, na.rm=TRUE)})
writeMat(sprintf("%s/aveAcc.m", result_path), A = ave_acc)
levelplot(t(ave_acc), main="Average Accuracy over Simulations",
xlab="Connection Strength", ylab="Connection Probability",
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
ave_tpr <- apply(tpr_log[, forceInd,,], c(1, 2), function(x) {mean(x, na.rm=TRUE)})
writeMat(sprintf("%s/aveTPR.m", result_path), A = ave_tpr)
levelplot(t(ave_tpr), main="Average TPR over Simulations",
xlab="Connection Strength", ylab="Connection Probability",
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
ave_fpr <- apply(fpr_log[, forceInd,,], c(1, 2), function(x) {mean(x, na.rm=TRUE)})
writeMat(sprintf("%s/aveFPR.m", result_path), A = ave_fpr)
levelplot(t(ave_fpr), main="Average FPR over Simulations",
xlab="Connection Strength", ylab="Connection Probability",
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
library(rEDM)
library(lattice)
library(abind)
library(doParallel)
require(R.matlab)
require(matlabr)
setwd("~/netinf/CCM")
source('ccm_helper.R')
source('CCMBaseExperiment.R')
source('AnalysisFunctions/moving_average.R')
exp_name <- "PertVarySizeForcingStrengths"
exp_path <- sprintf("../KuramotoExperiments/EXP%s", exp_name)
print(exp_path)
if (!dir.exists(exp_path)) {
print(sprintf("Data not found: %s", exp_path))
stop()
}
result_path <- sprintf("%s/CCMResults", exp_path)
if (!dir.exists(result_path)) {
dir.create(result_path)
} else {
m <- readline(prompt=sprintf("%s\n already exists, would you like to continue and overwrite these results (Y/N): ", result_path))
if (toupper(m) == "N") {
stop()
}
}
# Read data simulation parameters
params <- readMat(sprintf("%s/params.mat", exp_path))
# Perform CCM analysis on data
num_libs <- 1
num_samples <- 100
preprocfn <- identity
max_delay <- Inf
max_emb <- Inf
# Save experiment parameters
exp_params <- list("num_libs"=num_libs, "num_samples"=num_samples, "preprocfn"=preprocfn, "max_delay"=max_delay, "max_emb"=max_emb)
saveRDS(exp_params, sprintf("%s/exp_params.rds", result_path))
num_trials <- 1 #params$numTrials
num_mats <- params$numMats
network_sizes <- params$networkSizes
num_sizes <- params$numSizes
strengths <- params$strengths
num_strengths <- params$numStrengths
# Register number of cores
registerDoParallel(cores=25)
Es <- array(NaN, c(num_sizes, num_strengths, num_mats))
taus <- array(NaN, c(num_sizes, num_strengths, num_mats))
results <-
foreach (j = 1:num_sizes, .combine='cbind') %:%
foreach (k = 1:num_forces, .combine='cbind') %:%
foreach (l = 1:num_strengths, .combine='cbind') %:%
foreach (m = 1:num_mats, .combine='cbind') %do% {
print(sprintf('size: %d, force: %d, strength: %d, mat: %d', j, k, l, m))
data_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/dataLog.mat", exp_path, j, k, l, m)
result_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/embedParams.txt", exp_path, j, k, l, m)
data_log <- readMat(data_path)
data <- data_log$noisyData
mat <- data_log$mat
emb_params <- embed_params(data_path, result_path, max_delay, max_emb)
Es[j, k, m] <- emb_params$E
taus[j, k, m] <- emb_params$tau
result <- CCMBaseExperiment(data, mat, emb_params$E, num_libs, emb_params$tau, num_trials, num_samples, preprocfn)
save(result, file=sprintf("%s/size%d/force%d/strength%d/mat%d/result.rds", exp_path, j, k, l, m))
result
}
library(rEDM)
library(lattice)
library(abind)
library(doParallel)
require(R.matlab)
require(matlabr)
setwd("~/netinf/CCM")
source('ccm_helper.R')
source('CCMBaseExperiment.R')
source('AnalysisFunctions/moving_average.R')
exp_name <- "PertVarySizeForcingStrengths"
exp_path <- sprintf("../KuramotoExperiments/EXP%s", exp_name)
print(exp_path)
if (!dir.exists(exp_path)) {
print(sprintf("Data not found: %s", exp_path))
stop()
}
result_path <- sprintf("%s/CCMResults", exp_path)
if (!dir.exists(result_path)) {
dir.create(result_path)
} else {
m <- readline(prompt=sprintf("%s\n already exists, would you like to continue and overwrite these results (Y/N): ", result_path))
if (toupper(m) == "N") {
stop()
}
}
# Read data simulation parameters
params <- readMat(sprintf("%s/params.mat", exp_path))
# Perform CCM analysis on data
num_libs <- 1
num_samples <- 100
preprocfn <- identity
max_delay <- Inf
max_emb <- Inf
# Save experiment parameters
exp_params <- list("num_libs"=num_libs, "num_samples"=num_samples, "preprocfn"=preprocfn, "max_delay"=max_delay, "max_emb"=max_emb)
saveRDS(exp_params, sprintf("%s/exp_params.rds", result_path))
num_trials <- 1 #params$numTrials
num_mats <- params$numMats
network_sizes <- params$networkSizes
num_sizes <- params$numSizes
forces <- params$forces
num_forces <- params$numForces
strengths <- params$strengths
num_strengths <- params$numStrengths
# Register number of cores
registerDoParallel(cores=25)
Es <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
taus <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
results <-
foreach (j = 1:num_sizes, .combine='cbind') %:%
foreach (k = 1:num_forces, .combine='cbind') %:%
foreach (l = 1:num_strengths, .combine='cbind') %:%
foreach (m = 1:num_mats, .combine='cbind') %do% {
print(sprintf('size: %d, force: %d, strength: %d, mat: %d', j, k, l, m))
data_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/dataLog.mat", exp_path, j, k, l, m)
result_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/embedParams.txt", exp_path, j, k, l, m)
data_log <- readMat(data_path)
data <- data_log$noisyData
mat <- data_log$mat
emb_params <- embed_params(data_path, result_path, max_delay, max_emb)
Es[j, k, l, m] <- emb_params$E
taus[j, k, l, m] <- emb_params$tau
result <- CCMBaseExperiment(data, mat, emb_params$E, num_libs, emb_params$tau, num_trials, num_samples, preprocfn)
save(result, file=sprintf("%s/size%d/force%d/strength%d/mat%d/result.rds", exp_path, j, k, l, m))
result
}
result
# Create data structures to hold experiment results
pred_mats <- array(list(), c(num_sizes, num_forces, num_strengths, num_mats))
graph_log <- array(list(), c(num_sizes, num_forces, num_strengths, num_mats))
tpr_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
fpr_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
acc_log <- array(NaN, c(num_sizes, num_forces, num_strengths, num_mats))
for (ind in 1:(num_sizes*num_forces*num_strengths*num_mats)) {
result <- results
if (num_sizes*num_forces*num_strengths*num_mats > 1) {
result <- results[, ind]
}
idx <- arrayInd(ind, c(num_mats, num_strengths, num_forces, num_sizes))
m <- idx[1]
l <- idx[2]
k <- idx[3]
j <- idx[4]
pred_mats[j, k, l, m][[1]] <- result$pred_mats
graph_log[j, k, l, m][[1]] <- result$graphs
table_results <- result$table_results
tpr_log[j, k, l, m] <- table_results$tpr
fpr_log[j, k, l, m] <- table_results$fpr
acc_log[j, k, l, m] <- table_results$acc
}
results
j<-1
k<-1
l<-1
m<-1
print(sprintf('size: %d, force: %d, strength: %d, mat: %d', j, k, l, m))
data_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/dataLog.mat", exp_path, j, k, l, m)
result_path <- sprintf("%s/size%d/force%d/strength%d/mat%d/embedParams.txt", exp_path, j, k, l, m)
data_log <- readMat(data_path)
data <- data_log$noisyData
mat <- data_log$mat
emb_params <- embed_params(data_path, result_path, max_delay, max_emb)
Es[j, k, l, m] <- emb_params$E
taus[j, k, l, m] <- emb_params$tau
result <- CCMBaseExperiment(data, mat, emb_params$E, num_libs, emb_params$tau, num_trials, num_samples, preprocfn)
save(result, file=sprintf("%s/size%d/force%d/strength%d/mat%d/result.rds", exp_path, j, k, l, m))
result
# Save experiment result files.
save(pred_mats, tpr_log, fpr_log, acc_log, Es, taus, graph_log, file=sprintf("%s/results.rds", result_path))
writeMat(sprintf("%s/results.mat", result_path), tprLog=tpr_log, fprLog=fpr_log, accLog=acc_log)
1 %% 2
2 %% 2
