data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
data_func <- function() {
# Construct the adjacency matrix
A <- symmetric_erdos_reyni(n, p)
print(A)
# Construct the spring constants matrix
K <- tridiag(n + 2, corners=FALSE)
K[2 : (n + 1), 2 : (n + 1)] <- A
K <- k_const * K
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], type="l")
return(nncoupled_model)
}
data_func()
data_func()
data_func()
unifpfn(n, bc);
unifpfn
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
rho_ave
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
plot(Es, rho_ave, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)", main=paste("n = ", n, ", p = ", p))
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/ccm_random_hyperparameters.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
rho_ave
source('~/netinf/CCM/get_dimension.R', echo=TRUE)
rho_ave
source('~/netinf/CCM/ccm_random_hyperparameters.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/2_nodes.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
source('~/netinf/CCM/ccm_helper.R', echo=TRUE)
source('~/netinf/CCM/ccm_scripts/ccm_nncoupled_random.R', echo=TRUE)
A
unifpfn(3)
unifpfn(3, "circ")
state
state <- c(pos=pos,  # initial positions
vel=vel)
c(c(1, 2, 3), c(4, 5, 6))
matrix(c(1, 2, 3), nrow=3, ncol=3)
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zer
f
nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
source('~/netinf/CCM/generate_data.R', echo=TRUE)
nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
data_func()
nncoupled_data(n, time, K, randpfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
data_func()
data_func()
data_func()
nncoupled_data(n, time, K, randpfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
k_const <- 0.01
K <- tridiag(n + 2, corners=FALSE)
K[2 : (n + 1), 2 : (n + 1)] <- A
K <- k_const * K
data_func()
nncoupled_data(n, time, K, randpfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
data_func()
data_func()
data_func
K
A <- symmetric_erdos_reyni(n, 1)
k_const <- 0.01
K <- tridiag(n + 2, corners=FALSE)
K[2 : (n + 1), 2 : (n + 1)] <- A
K <- k_const * K
K
data_func
data_func()
data_func()
data_func()
data_func()
data_func()
data_func <- function() {
# Construct the adjacency matrix
A <- symmetric_erdos_reyni(n, p)
# Construct the spring constants matrix
K <- tridiag(n + 2, corners=FALSE)
K[2 : (n + 1), 2 : (n + 1)] <- A
K <- k_const * K
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
data_func()
data_func()
n <- 10
n <- 3
data_func()
data_func()
data_func()
k_const <- 1
data_func()
data_func()
data_func()
source('~/netinf/CCM/generate_data.R', echo=TRUE)
data_func()
data_func()
data_func()
data_func()
source('~/netinf/CCM/generate_data.R', echo=TRUE)
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
data_func()
force
data_func[2:3]
data_func()[2:3]
x <- data_func()
x
x[2:3]
x[1:3]
source('~/netinf/CCM/generate_data.R', echo=TRUE)
data_func()
seq(from=-0.5, to=(n-1)/n - 0.5, by=1/n)
erdos_reyni(1, 1)
erdos_reyni(5, 1)
erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
symmetric_erdos_reyni(5, 0.5)
c(1, 2, 3, 4, 5, 6)[1:5]
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, constcfn, bc=bc, pert=0);
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
source('~/netinf/CCM/generate_data.R', echo=TRUE)
data_func()
bc = 'free'
data_func()
K <- tridiag(n, corners=FALSE)
constcfn
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, onepfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
data_func()
pfn <- function(n, bc) {return(c(-0.5, 3, 2, 1, 1.2))}
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, pfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
n
n <- 5
K <- tridiag(n, corners=FALSE)
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, K, pfn, zerovfn,
constmfn, zerocfn, bc=bc, pert=0);
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], col=rainbow(n), type="l", lty=1)
legend("topright", legend=names, col=rainbow(n), lty=1, cex=0.8)
return(nncoupled_model)
}
data_func()
data_func()[200]
tspan
time
length(tmax)
length(time)
time <- seq(0, tmax, by=deltat)
data_func()
K <- tridiag(n+2, corners=FALSE)
bc='fixed'
data_func()
data_func()[200]
data_func()[200,]
data_func()[201,]
data_func()[202,]
data_func()[201,]
data_func()
bc
K
data_func()[201,]
bc='free'
K <- tridiag(n, corners=FALSE)
data_func()
data_func()[201,]
bc
bc="fixed"
K <- tridiag(n+2, corners=FALSE)
data_func()
data_func()[201]
data_func()[201,]
K
bc
data_func
pfn
zerovfn
constmfn
zerocfn
bc
data_func()
pfn
pfn <- function(n, bc) {return c(0, 0.1, 0.2, 0.3, 0.4)}
pfn <- function(n, bc) {return(c(0, 0.1, 0.2, 0.3, 0.4))}
data_func()
bc
bc <- "free"
K
K <- tridiag(5, corners=FALSE)
K
data_func()
data_func()[201]
data_func()[201,]
data_func()[200,]
data_func()[200,]
K <- tridiag(7, corners=FALSE)
bc <- "fixed"
data_func()
data_func()[201]
data_func()[201,]
K <- tridiag(5, corners=FALSE)
K
K <- tridiag(4, corners=FALSE)
K[1, 3] <- 1
K
K[1, 4] <- 1
K
K[2, 3] <- 0
K[3, 2] <- 0
K
K[3, 1] <- 1
K
K[2, 4] <- 1
K
K[4, 1] <- 1
K[4, 2] <- 1
K
data_func()
bc <- "free"
data_func()
n <- 4
data_func()
pfn
pfn <- function(n, bc) {return(c(0, 0.1, 0.2, 0.3))}
data_func()
data_func()[201,]
K <- matrix(6)
K
K <- matrix(c(0))
K
K <- matrix(c(0, 1, 1, 1, 1, 1), c())
K <- matrix(c(0, 1, 1, 1, 1, 1))
K
K <- matrix(c(0, 1, 1, 1, 1, 1), c(1, 0, 0, 0, 0, 1))
K
K <- matrix(c(c(0, 1, 1, 1, 1, 1), c(1, 0, 0, 0, 0, 1))
K
K <- matrix(c(c(0, 1, 1, 1, 1, 1), c(1, 0, 0, 0, 0, 1)))
K
K <- tridiag(6)
data_func()
bc <-"fixed"
data_func()
data_func()[201]
data_func()[201,]
source('~/netinf/CCM/generate_data.R', echo=TRUE)
pfn
g <- sample_pa(10000)
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
igraph_demo()
igraph
which igraph
g <- sample_pa(10000)
g
as_adj(g)
library(rEDM)
library(lattice)
#source('../generate_data.R')
#source('../ccm_helper.R')
# Number of Nodes
n <- 4
E <- 4
# Time Vector
tmax <- 20
time <- seq(1, tmax, by=0.1)
# Boundary Conditions
bc <- "circ"
trials <- 10
libs <- seq(10, length(time)-10, by=20)
noise <- 0.01
randpfn <- function(n, bc) {
return(c(0.1, 0.25, 0.5, 0.75))
}
constmfn <- function(n) {
return(c(100, 100, 100, 100))
}
constkfn <- function(n, bc) {
k <- rep(1, n)  # circ
if (bc == "fixed") {
k <- rep(50, n+1)
} else if (bc == "free") {
k <- rep(50, n-1)
}
return(k)
}
# Generate Nearest-Neighbor Spring Mass Model Adjacency Matrix
names <- paste("pos", 1:n, sep="")
data_func <- function() {
nncoupled_model <- nncoupled_data(n, time, randpfn, zerovfn,
constmfn, constkfn, zerocfn, bc=bc, pert=0)
nncoupled_model <- nncoupled_model + cbind(0,matrix(rnorm(n*length(time),mean=0,sd=noise),length(time),n))
matplot(nncoupled_model[, !(colnames(nncoupled_model) %in% "time")], type="l")
return(nncoupled_model)
}
ccm_rho_graphs <- get_ccm_rho(data_func, E, names, lib_sizes=libs, trials=trials);
adj <- get_adj(ccm_rho_graphs);
rgb.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,3))
}
levelplot(adj, main="NNCoupled Correlation",
xlab="", ylab="", ylim=c(length(names) + 0.5, 0.5),
col.regions=rgb.palette(120),
at=seq(0, 1, length.out=120),
panel=myPanel)
source('~/netinf/CCM/Figure2Analysis.R')
setwd("~/netinf/CCM")
E <- 10
tau <- 1
num_libs <- 10
num_trials <- 100
num_samples <- 100
exp_params <- list("E"=E, "num_libs"=num_libs, "tau"=tau, "num_trials"=num_trials, "num_samples"=num_samples)
saveRDS(exp_params, sprintf("%s/exp_params.rds", result_path))
result1 <- CCMBaseExperiment(data1, true_mat, E, num_libs, tau, num_trials, num_samples)
pred_mat1 <- drop(result1$pred_mats)
graph1 <- drop(result1$graph)
library(rEDM)
library(lattice)
require(R.matlab)
source('ccm_helper.R')
source('CCMBaseExperiment.R')
source('AnalysisFunctions/ConfusionMatrix.R')
exp_name <- "EXPNetworkInferenceAccuracy"
exp_path <- sprintf("../KuramotoExperiments/%s", exp_name)
print(exp_path)
if (!dir.exists(exp_path)) {
print(sprintf("Data not found: %s", exp_path))
stop()
}
result_path <- sprintf("%s/CCMResults", exp_path)
if (!dir.exists(result_path)) {
dir.create(result_path)
} else {
m <- readline(prompt=sprintf("%s\n already exists, would you like to continue and overwrite these results (Y/N): ", result_path))
if (toupper(m) == "N") {
stop()
}
}
# Get trajectory data.
data_log <- readMat(sprintf("%s/dataLog.mat", exp_path))
data1 <- data_log[[1]]
data2 <- data_log[[2]]
data3 <- data_log[[3]]
# Get connectivity matrix.
true_mat <- readMat(sprintf("%s/trueMat.mat", exp_path))[[1]]
# Perform CCM analysis on sample data
E <- 10
tau <- 1
num_libs <- 10
num_trials <- 100
num_samples <- 100
exp_params <- list("E"=E, "num_libs"=num_libs, "tau"=tau, "num_trials"=num_trials, "num_samples"=num_samples)
saveRDS(exp_params, sprintf("%s/exp_params.rds", result_path))
result1 <- CCMBaseExperiment(data1, true_mat, E, num_libs, tau, num_trials, num_samples)
pred_mat1 <- drop(result1$pred_mats)
graph1 <- drop(result1$graph)
pred_mat1
dim(graph1)
plot(graph1[1,7,,1])
plot(graph1[1,7,,2])
